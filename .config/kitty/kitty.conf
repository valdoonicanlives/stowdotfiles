# Kitty theme
# Add the theme at the top, any setting below the theme will be overriden
# include ~/github/dotfiles-latest/kitty/themes/themes/ChallengerDeep.conf
# include ~/github/dotfiles-latest/kitty/themes/themes/Catppuccin-Mocha.conf
# include ~/github/dotfiles-latest/kitty/themes/themes/Linkarzu.conf
include /home/delboy/.config/kitty/active-theme.conf

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on "Stack Overflow"
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. Changing this option by reloading the config will only affect
#: newly created windows.
# 
# xterm-kitty is the default, but I'm hardcoding it just in case
term xterm-kitty

font_size 13

# Make sure you have the fonts installed
# This is the only way I could make jetbrains mono work, using the "Mono" word
# at the very end
#font_family      JetBrainsMono Nerd Font Mono
#bold_font        JetBrainsMono Nerd Font Mono Extra Bold
#bold_italic_font JetBrainsMono Nerd Font Mono Extra Bold Italic
# font_family MesloLGM Nerd Font
# font_family MesloLGS Nerd Font
# font_family MesloLGMDZ Nerd Font

# Kitty's font was more spaced compared to alacritty's, tried font variations
# but it didn't change, so I went with this, it works fine
modify_font cell_width 95%

# I was going crazy
# after a kitty update, font height seemed smaller, this fixed it
modify_font cell_height 5px

scrollback_lines 10000

# The following command checks if tmux is installed.
# If tmux is installed, it automatically attaches to an existing tmux session.
# If no tmux session exists, a new one is created.
# If tmux is not installed, it simply starts zsh without tmux.
#
# For this to work properly, you need to make sure that your shell is configured
# for homebrew, so you should have this line:
# eval "$(/opt/homebrew/bin/brew shellenv)"
# In your ~/.zprofile file
# If you don't have that line, or if the file doesn't exist, run this:
# echo '' >>~/.zprofile && echo '# Configure shell for brew' >>~/.zprofile && echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >>~/.zprofile && eval "$(/opt/homebrew/bin/brew shellenv)"
#
# This assumes you installed tmux through brew if using macos
# shell zsh --login -c "if command -v tmux >/dev/null 2>&1; then tmux attach || tmux; else zsh; fi"

# Old version of above command:
# The 2 commands after login are needed to automatically attach to an existing 
# tmux session, if no session exists, a new one is created
# shell zsh --login -c "tmux attach || tmux"

# Open `sticky.md` in Vim using a custom vimrc file and preven any saved session files from loading.
# - I'm using a bash shell because if I load zsh, my zshrc file is too heavy
# -n      - disables swap files, directly opening the file.
# -u file - uses a custom vimrc.
# -U NONE - prevents loading session files, avoiding prior states or buffers.
# I do want a swap file, as I was losing my changes a lot because I didn't save, will enable auto save later on
# shell bash --login -c "vim -u ~/github/dotfiles-latest/vimrc/vimrc-file-sticky ~/github/dotfiles-latest/neovim/neobean-sticky/sticky.md"
# shell bash --login -c "~/github/dotfiles-latest/yabai/positions/kitty-pos.sh && NVIM_APPNAME=neobean-sticky nvim ~/github/dotfiles-latest/neovim/neobean-sticky/skitty-notes.md"
# shell bash --login -c "~/github/dotfiles-latest/yabai/positions/kitty-pos.sh && NVIM_APPNAME=neobean-sticky nvim \"$HOME/Library/Mobile Documents/com~apple~CloudDocs/github/macos-setup/mac/skitty/skitty-notes.md\""
# shell bash --login -c "~/github/dotfiles-latest/yabai/positions/kitty-pos.sh && NVIM_APPNAME=neobean-sticky nvim \"$HOME/Library/Mobile Documents/com~apple~CloudDocs/github/skitty/skitty-notes.md\""

# # Set the NEOVIM_MODE environment variable when calling neovim, this variable
# # will be accessible within the neovim session
# # NOTE:I'm prepending /opt/homebrew/bin to the PATH, so all the needed binaries (e.g., bash, nvim) are found
#
# # NOTE: Starting neovim with the --listen flag to create a socket at /tmp/skitty-neobean-socket
# # This allows the ~/github/dotfiles-latest/scripts/macos/mac/400-autoPushGithub.sh
# # script to trigger buffer writes and refresh lualine
# # To test the socket:
# # nvim --server /tmp/skitty-neobean-socket --remote-send ':lua vim.notify("Socket deeznuts!", "info")<CR>'
# # The autopush script uses this to trigger a write:
# # nvim --server /tmp/skitty-neobean-socket --remote-send ':silent w<CR>'
# # I'm cleaning up the socket before start, otherwise it's lef there from a
# # previous run and it just stops working
# #
# # I also source the bashrc file to get the MD_HEADING_BG variable exported
# #
#shell bash --login -c "~/github/dotfiles-latest/yabai/positions/kitty-pos.sh && source ~/.bashrc && rm -f /tmp/skitty-neobean-socket && export PATH=\"/opt/homebrew/bin:$PATH\" && export NEOVIM_MODE=skitty && cd \"$HOME/github/skitty\" && NVIM_APPNAME=neobean nvim --listen /tmp/skitty-neobean-socket \"$HOME/github/skitty/supporters.md\" && sleep 1 && ~/github/dotfiles-latest/yabai/positions/kitty-pos.sh"

# When you do fn+ctrl+shift+2 it opens the kitty file in the editor below
editor nvim

# These colors match what I have in my alacritty theme
# Commenting them as they're set by the theme on the top
# foreground #CDD6F4
# background #1E1E2E

# Make kitty borderless
# "yes" disables round corners and hides the title bar 
# "titlebar-only" leaves round corners but hides title bar
# hide_window_decorations yes
hide_window_decorations titlebar-only
# hide_window_decorations titlebar-and-corners

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.
# window_padding_width 5 5 0 0
# window_padding_width 1 4 1 4
window_padding_width 0

# I'm adding these below the theme in case the theme sets them
cursor #ebfafa
cursor_text_color #0D1116

#: Ask for confirmation when closing an OS window or a tab with at
#: least this number of kitty windows in it by window manager (e.g.
#: clicking the window close button or pressing the operating system
#: shortcut to close windows) or by the close_tab action. A value of
#: zero disables confirmation. This confirmation also applies to
#: requests to quit the entire application (all OS windows, via the
#: quit action). Negative values are converted to positive ones,
#: however, with shell_integration enabled, using negative values
#: means windows sitting at a shell prompt are not counted, only
#: windows where some command is currently running. Note that if you
#: want confirmation when closing individual windows, you can map the
#: close_window_with_confirmation action.
confirm_os_window_close 0

#: The audio bell. Useful to disable it in environments that require
#: silence.
enable_audio_bell no

#: Use the Option key as an Alt key on macOS. With this set to no,
#: kitty will use the macOS native Option+Key to enter Unicode
#: character behavior. This will break any Alt+Key keyboard shortcuts
#: in your terminal programs, but you can use the macOS Unicode input
#: technique. You can use the values: left, right or both to use only
#: the left, right or both Option keys as Alt, instead. Note that
#: kitty itself always treats Option the same as Alt. This means you
#: cannot use this option to configure different kitty shortcuts for
#: Option+Key vs. Alt+Key. Also, any kitty shortcuts using
#: Option/Alt+Key will take priority, so that any such key presses
#: will not be passed to terminal programs running inside kitty.
#: Changing this option by reloading the config is not supported.
#macos_option_as_alt right

# NOTE: The neovide cursor type in kitty came during a YouTube livestream by 
# user "Carlos Medina"
#
#: The cursor shape can be one of block, beam, underline. Note that
#: when reloading the config this will be changed only if the cursor
#: shape has not been set by the program running in the terminal. This
#: sets the default cursor shape, applications running in the terminal
#: can override it. In particular, shell integration
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> in kitty sets
#: the cursor shape to beam at shell prompts. You can avoid this by
#: setting shell_integration to no-cursor.
cursor_shape beam

#: The thickness of the beam cursor (in pts).
cursor_beam_thickness 1.5

#: The thickness of the underline cursor (in pts).
cursor_underline_thickness 2.0

#: The interval to blink the cursor (in seconds). Set to zero to
#: disable blinking. Negative values mean use system default. Note
#: that the minimum interval will be limited to repaint_delay.
cursor_blink_interval -1

#: Stop blinking cursor after the specified number of seconds of
#: keyboard inactivity. Set to zero to never stop blinking.
cursor_stop_blinking_after 15.0

# Set this to a value larger than zero to enable a “cursor trail” animation. This is an animation that shows a “trail” following the movement of the text cursor. It makes it easy to follow large cursor jumps and makes for a cool visual effect of the cursor zooming around the screen. The actual value of this option controls when the animation is triggered. It is a number of milliseconds. The trail animation only follows cursors that have stayed in their position for longer than the specified number of milliseconds. This prevents trails from appearing for cursors that rapidly change their positions during UI updates in complex applications. See cursor_trail_decay to control the animation speed and cursor_trail_start_threshold to control when a cursor trail is started.
#cursor_trail 1

# Controls the decay times for the cursor trail effect when the cursor_trail is enabled. This option accepts two positive float values specifying the fastest and slowest decay times in seconds. The first value corresponds to the fastest decay time (minimum), and the second value corresponds to the slowest decay time (maximum). The second value must be equal to or greater than the first value. Smaller values result in a faster decay of the cursor trail. Adjust these values to control how quickly the cursor trail fades away.
#cursor_trail_decay 0.1 0.6

# Set the distance threshold for starting the cursor trail. This option accepts a positive integer value that represents the minimum number of cells the cursor must move before the trail is started. When the cursor moves less than this threshold, the trail is skipped, reducing unnecessary cursor trail animation.
#cursor_trail_start_threshold 2
