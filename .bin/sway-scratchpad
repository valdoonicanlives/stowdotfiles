#!/bin/bash

# This is free and unencumbered software released into the public domain.

# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.

# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# For more information, please refer to <http://unlicense.org/>

VERSION="2.1"

print_help() {
	printf 'Usage: %s [-a <anchor>] [-d <size>] [-p <pos>] [-s <screen>] [-m <edge>] [-w <wm>] [-h] [-t] [-v] [-V] <command>\n' "$script_name"
	printf 'Executes a program in a positioned scratchpad window.\n'
	printf 'Marks windows for the command arguments, so executing the same command will re-use the existing window, if it still exists.\n'
	printf '\nArguments:\n'
	printf ' -a <anchor>   Sets where to calculate position from. Valid values are combinations of {top,centre,bottom} and\n'
	printf '               {left,centre,right}, separated by "-". (Example: centre-right). Can be shortened as: tl, tr, etc.\n'
	printf '               Position will then be calculated from the anchor point on the screen to that same anchor\n'
	printf '               point on the window. Default is centre-centre.\n'
	printf ' -d <size>     Dimensions of window in pixels, in WIDTHxHEIGHT format.\n'
	printf '               Percentages of the screen dimensions can be used as well. Default is 50%%x50%%\n'
	printf ' -h            Prints this help page.\n'
	printf ' -m <edge>     Animates the movement to target position from specified edge.\n'
	printf '               Valid values are top, left, bottom, right / t, l, b, r.\n'
	printf ' -p <pos>      Position of window on pixels, in X,Y format. Negative values can be used as well. Default is 0,0.\n'
	printf ' -s <screen>   Screen identifier, as listed in xrandr. Falls back to focused screen (sway) or primary screen (i3).\n'
	printf ' -t            Toggles the window.\n'
	printf ' -v            Verbose, for debugging.\n'
	printf ' -V            Print version information.\n'
	printf ' -w [sway|i3]  Which window manager to use.\n'
	printf ' <command>     Command to execute in order to open window, if it doesn%ct exist.\n' \'
	printf '\nExample:\n'
	printf ' # Popdown seethrough terminal (kitty)\n'
	printf ' bindsym $mod+Ctrl+Return exec --no-startup-id %s -t -mt -atc -d 60%%x60%% -- kitty --override background_opacity=0.7\n' "$script_name"
}

main() {
	local screen_width screen_height offset_x offset_y width height x_pos y_pos \
	      move command toggle verbose animation_frame_delay=0.01 wm wm_msg

	parse_arguments "$@"

	already_running || start_and_mark_window
}

parse_arguments() {
	local script_name dim='\([0-9]\+%\?\)' pos='\(-\?[0-9]\+\)' anchor='cc'
	script_name=$(basename "$0")
	while getopts a:d:hm:p:s:tvVw arg; do
		case $arg in
			a) anchor="$OPTARG";;
			d) read -r width height < <(sed -n "s/^${dim}x${dim}$/\1 \2/p" <<< "$OPTARG");;
			h) print_help; exit 0;;
			m) move="$OPTARG";;
			p) read -r x_pos y_pos < <(sed -n "s/^${pos},${pos}$/\1 \2/p" <<< "$OPTARG");;
			s) screen="$OPTARG";;
			t) toggle=true;;
			v) verbose=true;;
			V) printf 'Version %s\n' "$VERSION"; exit 0;;
			w) wm="$OPTARG";;
			*) print_help; exit 1;;
		esac
	done
	shift $((OPTIND - 1))
	command="$*"
	if [[ ! "$command" ]]; then
		printf 'Command argument is missing. See %s -h.\n' "$script_name" >&2
		exit 1
	fi
	id_mark="_sway_scratchpad_$(md5sum <<< "$command" | cut -f1 -d' ')"
	debug "Determined mark as $id_mark"

	ensure_anchors
	ensure_wm
	ensure_screen
	parse_dimensions
}

ensure_anchors() {
	if [[ "$anchor" =~ ^(top|center|bottom)-(left|center|right)$ ]]; then
		anchor=$(sed -n 's/^\([tcb]\)[^-]\+-\([lcr]\).*$/\1\2/p' <<< "$anchor")
	fi

	if [[ ! "$anchor" =~ ^([tcb])([lcr])$ ]]; then
		printf 'Anchor "%s" is invalid. See %s -h.\n' "$anchor" "$script_name" >&2
		exit 1
	fi

	if [[ "$move" =~ ^(top|bottom|left|right)$ ]]; then
		move=$(sed -n 's/^\([tblr]\).*$/\1/p' <<< "$move")
	fi

	if [[ -n "$move" && ! "$move" =~ ^[tblr]$ ]]; then
		printf 'Move "%s" is invalid. See %s -h.\n' "$move" "$script_name" >&2
		exit 1
	fi
}

ensure_wm() {
	local has_swaymsg=no has_i3msg=no sway_running=no i3_running=no
	case "${wm,,}" in # Make lowercase
		'') ;; # Continue below
		*sway*) wm_msg=swaymsg; return;;
		*i3*) wm_msg=i3-msg; return;;
		*)
			printf "Couldn't recognise wm value \"%s\"; expected sway or i3" "$wm" >&2
			exit 1 ;;
	esac

	which swaymsg &> /dev/null && has_swaymsg=yes
	which i3-msg  &> /dev/null && has_i3msg=yes

	case $has_swaymsg,$has_i3msg in
		no,no)
			printf "Neither swaymsg nor i3-msg found in \$PATH. Can't continue." >&2
			exit 1 ;;
		yes,no) wm_msg=swaymsg; return ;;
		no,yes) wm_msg=i3-msg; return ;;
	esac
	debug "Both sway and i3 are installed, trying to determine which one is running."

	if [[ ! "$SWAYSOCK" && "$I3SOCK" ]] || ! swaymsg -q; then
		wm_msg=i3-msg
		return
	fi

	pgrep -x 'sway' &> /dev/null && sway_running=yes
	pgrep -x 'i3'   &> /dev/null && i3_running=yes

	case $sway_running,$i3_running in
		no,no)
			printf "Neither sway nor i3 are running. Can't continue." >&2
			exit 1 ;;
		yes,no) wm_msg=swaymsg; return ;;
		no,yes) wm_msg=i3-msg; return ;;
	esac

	debug 'Both sway and i3 are running. Defaulting to sway.'
	wm_msg=swaymsg
}

ensure_screen() {
	local jq_prog
	if [[ "$screen" ]] && ! $wm_msg -rt get_outputs | jq -e --arg screen "$screen" '.[] | select(.name == $screen)' > /dev/null; then
		debug "Given screen value $screen not found in output list"
		unset screen
	fi

	if [[ ! "$screen" ]]; then
		jq_prog='
			   first(.[] | select(.focused == true)).name # Sway exposes a focused field
			// first(.[] | select(.primary == true)).name # Else fallback to primary output
		'
		screen=$($wm_msg -rt get_outputs | jq -r "$jq_prog")
		debug "Setting screen to focused output $screen"
	fi
}

parse_dimensions() {
	local jq_prog dimensions
	width=${width:-50%}
	height=${height:-50%}
	x_pos=${x_pos:-0}
	y_pos=${y_pos:-0}

	# shellcheck disable=SC2016 # Complains about $var in single quotes
	jq_prog='
		# Locate selected screen
		first(.[] | select(.name == $screen))
		# And get its dimensions
		.rect | {width,height,x,y} | values | join(" ")
	'
	dimensions=$($wm_msg -rt get_outputs | jq -r --arg screen "$screen" "$jq_prog")
	read -r screen_width screen_height offset_x offset_y <<< "$dimensions"

	if [[ "$width" =~ %$ ]]; then
		width=$((screen_width * ${width//%/} / 100))
	fi
	if [[ "$height" =~ %$ ]]; then
		height=$((screen_height * ${height//%/} / 100))
	fi

	case "$anchor" in
		t?) y_pos=$((y_pos));;
		c?) y_pos=$((y_pos + ((screen_height - height) / 2)));;
		b?) y_pos=$((y_pos + screen_height - height));;
	esac

	case "$anchor" in
		?l) x_pos=$((x_pos));;
		?c) x_pos=$((x_pos + ((screen_width - width) / 2)));;
		?r) x_pos=$((x_pos + screen_width - width));;
	esac

	debug 'Calculated window dimensions are [' "x: $x_pos" "y: $y_pos" "w: $width" "h: $height" ']'
}

already_running() {
	local jq_prog focused_workspace

	$wm_msg -rt get_marks | jq -e --arg id_mark "$id_mark" 'index($id_mark)?' > /dev/null
	[[ $? == 1 ]] && return 1 # No appropriately marked window; short circuit

	if [[ ! $toggle ]]; then
		show_window_in_position
		return 0
	fi

	focused_workspace=$($wm_msg -rt get_workspaces | jq '.[] | select(.focused == true).id') # UNDOCUMENTED: sway-ipc(7) does not document an "id" field
	debug 'Determined focused workspace as '"$focused_workspace"

	# shellcheck disable=SC2016 # Complains about $var in single quotes
	jq_prog='
		# Pick out the focused workspace
		first(.nodes[].nodes[] | select(.type == "workspace" and .id == ($id_focused | tonumber)))
		# And recursively search it for an appropriately marked window
		| .. | select(.marks | index($id_mark))?
	'
	if $wm_msg -rt get_tree | jq -e "$jq_prog" --arg id_mark "$id_mark" --arg id_focused "$focused_workspace" > /dev/null; then
		debug 'Window was found in focused workspace, moving to scratchpad'
		hide_window
	else
		debug 'Window not in focused workspace, showing it'
		show_window_in_position
	fi
	return 0
}

start_and_mark_window() {
	local event change

	if ! event=$($wm_msg -q -- exec --no-startup-id "$command" && timeout 2s "$wm_msg" -r -t subscribe '[ "window" ]'); then
		printf 'Timed out waiting for command to finish: %s' "$command" >&2
		return 1
	fi
	change=$(jq '.change' <<< "$event")
	if [[ "$change" != '"new"' && "$change" != '"focus"' ]]; then
		printf 'Got unexpected window event (change = %s, expected "new" or "focus")\n' "$change" >&2
		return 1
	fi
	$wm_msg -q "mark --add \"$id_mark\""
	debug "Marked new window with identifying mark $id_mark"

	show_window_in_position
}

show_window_in_position() {
	if [[ ! "$move" ]]; then
		debug 'Moving to scratchpad, showing and resizing'
		$wm_msg -q -- "[con_mark=\"$id_mark\"] move to scratchpad, scratchpad show, move position $x_pos px $y_pos px, resize set $width px $height px"
		return 0
	fi

	local x x_inc=0 x_end y y_inc=0 y_end
	x=$x_pos
	y=$y_pos
	x_end=$x_pos
	y_end=$y_pos
	case "$move" in
		t) y=$((offset_y - height + 1));        y_inc=$(((y_pos - y) / 4));;
		b) y=$((offset_y + screen_height - 1)); y_inc=$(((y_pos - y) / 4));;
		l) x=$((offset_x - width + 1));         x_inc=$(((x_pos - x) / 4));;
		r) x=$((offset_x + screen_width - 1));  x_inc=$(((x_pos - x) / 4));;
	esac
	$wm_msg -q -- "[con_mark=\"$id_mark\"] move to scratchpad, scratchpad show, move position $x px $y px, resize set $width px $height px"
	debug 'Starting show animation'
	while [[ ($x_inc -lt 0 && $x -gt $x_end) || ($x_inc -gt 0 && $x -lt $x_end) || ($y_inc -lt 0 && $y -gt $y_end) || ($y_inc -gt 0 && $y -lt $y_end) ]]; do
		animate
	done
	debug 'Animation completed'
	$wm_msg -q -- "[con_mark=\"$id_mark\"] move position $x_pos px $y_pos px"
}

hide_window() {
	if [[ "$move" ]]; then
		[[ ! "$BASH_LOADABLES_PATH" ]] && BASH_LOADABLES_PATH=$(pkg-config bash --variable=loadablesdir 2>/dev/null)
		local x x_inc=0 x_end y y_inc=0 y_end
		x=$x_pos
		y=$y_pos
		x_end=$x_pos
		y_end=$y_pos
		case "$move" in
			t) y_end=$((offset_y - height));            y_inc=$(((y_end - y_pos) / 20));;
			b) y_end=$((offset_y + screen_height - 1)); y_inc=$(((y_end - y_pos) / 20));;
			l) x_end=$((offset_x - width));             x_inc=$(((x_end - x_pos) / 20));;
			r) x_end=$((offset_x + screen_width - 1));  x_inc=$(((x_end - x_pos) / 20));;
		esac
		debug 'Starting hide animation'
		while [[ ($x_inc -gt 0 && $x -lt $x_end) || ($x_inc -lt 0 && $x -gt $x_end) || ($y_inc -gt 0 && $y -lt $y_end) || ($y_inc -lt 0 && $y -gt $y_end) ]]; do
			animate
		done
		debug 'Animation completed'
	fi

	$wm_msg -q -- "[con_mark=\"$id_mark\"] move to scratchpad"
}

animate() {
	debug 'Moving to [' "$x" "$y" '] with increment [' "$x_inc" "$y_inc" ']'
	$wm_msg -q -- "[con_mark=\"$id_mark\"] move position $x px $y px"
	y=$((y + y_inc))
	x=$((x + x_inc))
	if [[ ($x -lt $x_pos && $x_inc -le 0) || ($x -gt $x_pos && $x_inc -ge 0) ]]; then
		x_inc=$((x_inc * 125 / 100))
	else
		x_inc=$((x_inc * 100 / 125))
	fi
	if [[ ($y -lt $y_pos && $y_inc -le 0) || ($y -gt $y_pos && $y_inc -ge 0) ]]; then
		y_inc=$((y_inc * 125 / 100))
	else
		y_inc=$((y_inc * 100 / 125))
	fi
	sleep "$animation_frame_delay"
}

debug() {
	if [[ "$verbose" ]]; then
		printf '%s\n' "$*"
	fi
}

[[ ! "$BASH_LOADABLES_PATH" ]] && BASH_LOADABLES_PATH=$(pkg-config bash --variable=loadablesdir 2>/dev/null)
enable -f sleep sleep


main "$@"
